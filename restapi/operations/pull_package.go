// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PullPackageHandlerFunc turns a function with the right signature into a pull package handler
type PullPackageHandlerFunc func(PullPackageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PullPackageHandlerFunc) Handle(params PullPackageParams) middleware.Responder {
	return fn(params)
}

// PullPackageHandler interface for that can handle valid pull package params
type PullPackageHandler interface {
	Handle(PullPackageParams) middleware.Responder
}

// NewPullPackage creates a new http.Handler for the pull package operation
func NewPullPackage(ctx *middleware.Context, handler PullPackageHandler) *PullPackage {
	return &PullPackage{Context: ctx, Handler: handler}
}

/*PullPackage swagger:route GET /api/v1/packages/{namespace}/{package}/{release}/pull package blobs pullPackage

Download the package

*/
type PullPackage struct {
	Context *middleware.Context
	Handler PullPackageHandler
}

func (o *PullPackage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPullPackageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
