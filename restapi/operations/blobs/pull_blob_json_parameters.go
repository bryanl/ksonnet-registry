// Code generated by go-swagger; DO NOT EDIT.

package blobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPullBlobJSONParams creates a new PullBlobJSONParams object
// with the default values initialized.
func NewPullBlobJSONParams() PullBlobJSONParams {
	var (
		formatDefault = string("gzip")
	)
	return PullBlobJSONParams{
		Format: &formatDefault,
	}
}

// PullBlobJSONParams contains all the bound params for the pull blob Json operation
// typically these are obtained from a http.Request
//
// swagger:parameters pullBlobJson
type PullBlobJSONParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*content digest
	  Required: true
	  In: path
	*/
	Digest string
	/*return format type(json or gzip)
	  In: query
	  Default: "gzip"
	*/
	Format *string
	/*namespace
	  Required: true
	  In: path
	*/
	Namespace string
	/*package name
	  Required: true
	  In: path
	*/
	Package string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *PullBlobJSONParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rDigest, rhkDigest, _ := route.Params.GetOK("digest")
	if err := o.bindDigest(rDigest, rhkDigest, route.Formats); err != nil {
		res = append(res, err)
	}

	qFormat, qhkFormat, _ := qs.GetOK("format")
	if err := o.bindFormat(qFormat, qhkFormat, route.Formats); err != nil {
		res = append(res, err)
	}

	rNamespace, rhkNamespace, _ := route.Params.GetOK("namespace")
	if err := o.bindNamespace(rNamespace, rhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	rPackage, rhkPackage, _ := route.Params.GetOK("package")
	if err := o.bindPackage(rPackage, rhkPackage, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PullBlobJSONParams) bindDigest(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Digest = raw

	return nil
}

func (o *PullBlobJSONParams) bindFormat(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var formatDefault string = string("gzip")
		o.Format = &formatDefault
		return nil
	}

	o.Format = &raw

	return nil
}

func (o *PullBlobJSONParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Namespace = raw

	return nil
}

func (o *PullBlobJSONParams) bindPackage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Package = raw

	return nil
}
