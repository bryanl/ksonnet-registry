// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/bryanl/ksonnet-registry/restapi/operations/blobs"
	"github.com/bryanl/ksonnet-registry/restapi/operations/channel"
	"github.com/bryanl/ksonnet-registry/restapi/operations/info"
	"github.com/bryanl/ksonnet-registry/restapi/operations/package_operations"
)

// NewKsonnetRegistryAPI creates a new KsonnetRegistry instance
func NewKsonnetRegistryAPI(spec *loads.Document) *KsonnetRegistryAPI {
	return &KsonnetRegistryAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		GzipProducer: runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
			return errors.NotImplemented("gzip producer has not yet been implemented")
		}),
		ChannelCreateChannelHandler: channel.CreateChannelHandlerFunc(func(params channel.CreateChannelParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelCreateChannel has not yet been implemented")
		}),
		ChannelCreateChannelReleaseHandler: channel.CreateChannelReleaseHandlerFunc(func(params channel.CreateChannelReleaseParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelCreateChannelRelease has not yet been implemented")
		}),
		PackageOperationsCreatePackageHandler: package_operations.CreatePackageHandlerFunc(func(params package_operations.CreatePackageParams) middleware.Responder {
			return middleware.NotImplemented("operation PackageOperationsCreatePackage has not yet been implemented")
		}),
		ChannelDeleteChannelHandler: channel.DeleteChannelHandlerFunc(func(params channel.DeleteChannelParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelDeleteChannel has not yet been implemented")
		}),
		ChannelDeleteChannelReleaseHandler: channel.DeleteChannelReleaseHandlerFunc(func(params channel.DeleteChannelReleaseParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelDeleteChannelRelease has not yet been implemented")
		}),
		PackageOperationsDeletePackageHandler: package_operations.DeletePackageHandlerFunc(func(params package_operations.DeletePackageParams) middleware.Responder {
			return middleware.NotImplemented("operation PackageOperationsDeletePackage has not yet been implemented")
		}),
		InfoGetVersionHandler: info.GetVersionHandlerFunc(func(params info.GetVersionParams) middleware.Responder {
			return middleware.NotImplemented("operation InfoGetVersion has not yet been implemented")
		}),
		ChannelListChannelsHandler: channel.ListChannelsHandlerFunc(func(params channel.ListChannelsParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelListChannels has not yet been implemented")
		}),
		PackageOperationsListPackagesHandler: package_operations.ListPackagesHandlerFunc(func(params package_operations.ListPackagesParams) middleware.Responder {
			return middleware.NotImplemented("operation PackageOperationsListPackages has not yet been implemented")
		}),
		BlobsPullBlobHandler: blobs.PullBlobHandlerFunc(func(params blobs.PullBlobParams) middleware.Responder {
			return middleware.NotImplemented("operation BlobsPullBlob has not yet been implemented")
		}),
		BlobsPullBlobJSONHandler: blobs.PullBlobJSONHandlerFunc(func(params blobs.PullBlobJSONParams) middleware.Responder {
			return middleware.NotImplemented("operation BlobsPullBlobJSON has not yet been implemented")
		}),
		PullPackageHandler: PullPackageHandlerFunc(func(params PullPackageParams) middleware.Responder {
			return middleware.NotImplemented("operation PullPackage has not yet been implemented")
		}),
		PullPackageJSONHandler: PullPackageJSONHandlerFunc(func(params PullPackageJSONParams) middleware.Responder {
			return middleware.NotImplemented("operation PullPackageJSON has not yet been implemented")
		}),
		ChannelShowChannelHandler: channel.ShowChannelHandlerFunc(func(params channel.ShowChannelParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelShowChannel has not yet been implemented")
		}),
		PackageOperationsShowPackageHandler: package_operations.ShowPackageHandlerFunc(func(params package_operations.ShowPackageParams) middleware.Responder {
			return middleware.NotImplemented("operation PackageOperationsShowPackage has not yet been implemented")
		}),
		PackageOperationsShowPackageManifestsHandler: package_operations.ShowPackageManifestsHandlerFunc(func(params package_operations.ShowPackageManifestsParams) middleware.Responder {
			return middleware.NotImplemented("operation PackageOperationsShowPackageManifests has not yet been implemented")
		}),
	}
}

/*KsonnetRegistryAPI Ksonnet Registry API documentation
 */
type KsonnetRegistryAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// GzipProducer registers a producer for a "application/x-gzip" mime type
	GzipProducer runtime.Producer

	// ChannelCreateChannelHandler sets the operation handler for the create channel operation
	ChannelCreateChannelHandler channel.CreateChannelHandler
	// ChannelCreateChannelReleaseHandler sets the operation handler for the create channel release operation
	ChannelCreateChannelReleaseHandler channel.CreateChannelReleaseHandler
	// PackageOperationsCreatePackageHandler sets the operation handler for the create package operation
	PackageOperationsCreatePackageHandler package_operations.CreatePackageHandler
	// ChannelDeleteChannelHandler sets the operation handler for the delete channel operation
	ChannelDeleteChannelHandler channel.DeleteChannelHandler
	// ChannelDeleteChannelReleaseHandler sets the operation handler for the delete channel release operation
	ChannelDeleteChannelReleaseHandler channel.DeleteChannelReleaseHandler
	// PackageOperationsDeletePackageHandler sets the operation handler for the delete package operation
	PackageOperationsDeletePackageHandler package_operations.DeletePackageHandler
	// InfoGetVersionHandler sets the operation handler for the get version operation
	InfoGetVersionHandler info.GetVersionHandler
	// ChannelListChannelsHandler sets the operation handler for the list channels operation
	ChannelListChannelsHandler channel.ListChannelsHandler
	// PackageOperationsListPackagesHandler sets the operation handler for the list packages operation
	PackageOperationsListPackagesHandler package_operations.ListPackagesHandler
	// BlobsPullBlobHandler sets the operation handler for the pull blob operation
	BlobsPullBlobHandler blobs.PullBlobHandler
	// BlobsPullBlobJSONHandler sets the operation handler for the pull blob Json operation
	BlobsPullBlobJSONHandler blobs.PullBlobJSONHandler
	// PullPackageHandler sets the operation handler for the pull package operation
	PullPackageHandler PullPackageHandler
	// PullPackageJSONHandler sets the operation handler for the pull package Json operation
	PullPackageJSONHandler PullPackageJSONHandler
	// ChannelShowChannelHandler sets the operation handler for the show channel operation
	ChannelShowChannelHandler channel.ShowChannelHandler
	// PackageOperationsShowPackageHandler sets the operation handler for the show package operation
	PackageOperationsShowPackageHandler package_operations.ShowPackageHandler
	// PackageOperationsShowPackageManifestsHandler sets the operation handler for the show package manifests operation
	PackageOperationsShowPackageManifestsHandler package_operations.ShowPackageManifestsHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *KsonnetRegistryAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *KsonnetRegistryAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *KsonnetRegistryAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *KsonnetRegistryAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *KsonnetRegistryAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *KsonnetRegistryAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *KsonnetRegistryAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the KsonnetRegistryAPI
func (o *KsonnetRegistryAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.GzipProducer == nil {
		unregistered = append(unregistered, "GzipProducer")
	}

	if o.ChannelCreateChannelHandler == nil {
		unregistered = append(unregistered, "channel.CreateChannelHandler")
	}

	if o.ChannelCreateChannelReleaseHandler == nil {
		unregistered = append(unregistered, "channel.CreateChannelReleaseHandler")
	}

	if o.PackageOperationsCreatePackageHandler == nil {
		unregistered = append(unregistered, "package_operations.CreatePackageHandler")
	}

	if o.ChannelDeleteChannelHandler == nil {
		unregistered = append(unregistered, "channel.DeleteChannelHandler")
	}

	if o.ChannelDeleteChannelReleaseHandler == nil {
		unregistered = append(unregistered, "channel.DeleteChannelReleaseHandler")
	}

	if o.PackageOperationsDeletePackageHandler == nil {
		unregistered = append(unregistered, "package_operations.DeletePackageHandler")
	}

	if o.InfoGetVersionHandler == nil {
		unregistered = append(unregistered, "info.GetVersionHandler")
	}

	if o.ChannelListChannelsHandler == nil {
		unregistered = append(unregistered, "channel.ListChannelsHandler")
	}

	if o.PackageOperationsListPackagesHandler == nil {
		unregistered = append(unregistered, "package_operations.ListPackagesHandler")
	}

	if o.BlobsPullBlobHandler == nil {
		unregistered = append(unregistered, "blobs.PullBlobHandler")
	}

	if o.BlobsPullBlobJSONHandler == nil {
		unregistered = append(unregistered, "blobs.PullBlobJSONHandler")
	}

	if o.PullPackageHandler == nil {
		unregistered = append(unregistered, "PullPackageHandler")
	}

	if o.PullPackageJSONHandler == nil {
		unregistered = append(unregistered, "PullPackageJSONHandler")
	}

	if o.ChannelShowChannelHandler == nil {
		unregistered = append(unregistered, "channel.ShowChannelHandler")
	}

	if o.PackageOperationsShowPackageHandler == nil {
		unregistered = append(unregistered, "package_operations.ShowPackageHandler")
	}

	if o.PackageOperationsShowPackageManifestsHandler == nil {
		unregistered = append(unregistered, "package_operations.ShowPackageManifestsHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *KsonnetRegistryAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *KsonnetRegistryAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *KsonnetRegistryAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *KsonnetRegistryAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *KsonnetRegistryAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/x-gzip":
			result["application/x-gzip"] = o.GzipProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *KsonnetRegistryAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the ksonnet registry API
func (o *KsonnetRegistryAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *KsonnetRegistryAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/packages/{namespace}/{package}/channels"] = channel.NewCreateChannel(o.context, o.ChannelCreateChannelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/packages/{namespace}/{package}/channels/{channel}/{release}"] = channel.NewCreateChannelRelease(o.context, o.ChannelCreateChannelReleaseHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/packages/{namespace}/{package}"] = package_operations.NewCreatePackage(o.context, o.PackageOperationsCreatePackageHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/packages/{namespace}/{package}/channels/{channel}"] = channel.NewDeleteChannel(o.context, o.ChannelDeleteChannelHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/packages/{namespace}/{package}/channels/{channel}/{release}"] = channel.NewDeleteChannelRelease(o.context, o.ChannelDeleteChannelReleaseHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/packages/{namespace}/{package}/{release}/{media_type}"] = package_operations.NewDeletePackage(o.context, o.PackageOperationsDeletePackageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = info.NewGetVersion(o.context, o.InfoGetVersionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}/channels"] = channel.NewListChannels(o.context, o.ChannelListChannelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages"] = package_operations.NewListPackages(o.context, o.PackageOperationsListPackagesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}/blobs/sha256/{digest}"] = blobs.NewPullBlob(o.context, o.BlobsPullBlobHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}/blobs/sha256/{digest}/json"] = blobs.NewPullBlobJSON(o.context, o.BlobsPullBlobJSONHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}/{release}/{media_type}/pull"] = NewPullPackage(o.context, o.PullPackageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}/{release}/{media_type}/pull/json"] = NewPullPackageJSON(o.context, o.PullPackageJSONHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}/channels/{channel}"] = channel.NewShowChannel(o.context, o.ChannelShowChannelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}/{release}/{media_type}"] = package_operations.NewShowPackage(o.context, o.PackageOperationsShowPackageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/packages/{namespace}/{package}"] = package_operations.NewShowPackageManifests(o.context, o.PackageOperationsShowPackageManifestsHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *KsonnetRegistryAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *KsonnetRegistryAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
