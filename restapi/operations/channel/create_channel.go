// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateChannelHandlerFunc turns a function with the right signature into a create channel handler
type CreateChannelHandlerFunc func(CreateChannelParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateChannelHandlerFunc) Handle(params CreateChannelParams) middleware.Responder {
	return fn(params)
}

// CreateChannelHandler interface for that can handle valid create channel params
type CreateChannelHandler interface {
	Handle(CreateChannelParams) middleware.Responder
}

// NewCreateChannel creates a new http.Handler for the create channel operation
func NewCreateChannel(ctx *middleware.Context, handler CreateChannelHandler) *CreateChannel {
	return &CreateChannel{Context: ctx, Handler: handler}
}

/*CreateChannel swagger:route POST /api/v1/packages/{namespace}/{package}/channels channel createChannel

Create a new channel

*/
type CreateChannel struct {
	Context *middleware.Context
	Handler CreateChannelHandler
}

func (o *CreateChannel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateChannelParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
