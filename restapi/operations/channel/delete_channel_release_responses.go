// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bryanl/ksonnet-registry/models"
)

// DeleteChannelReleaseOKCode is the HTTP code returned for type DeleteChannelReleaseOK
const DeleteChannelReleaseOKCode int = 200

/*DeleteChannelReleaseOK successful operation

swagger:response deleteChannelReleaseOK
*/
type DeleteChannelReleaseOK struct {

	/*
	  In: Body
	*/
	Payload models.DeleteChannelReleaseOKBody `json:"body,omitempty"`
}

// NewDeleteChannelReleaseOK creates DeleteChannelReleaseOK with default headers values
func NewDeleteChannelReleaseOK() *DeleteChannelReleaseOK {
	return &DeleteChannelReleaseOK{}
}

// WithPayload adds the payload to the delete channel release o k response
func (o *DeleteChannelReleaseOK) WithPayload(payload models.DeleteChannelReleaseOKBody) *DeleteChannelReleaseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete channel release o k response
func (o *DeleteChannelReleaseOK) SetPayload(payload models.DeleteChannelReleaseOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteChannelReleaseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.DeleteChannelReleaseOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteChannelReleaseUnauthorizedCode is the HTTP code returned for type DeleteChannelReleaseUnauthorized
const DeleteChannelReleaseUnauthorizedCode int = 401

/*DeleteChannelReleaseUnauthorized Not authorized to read the package

swagger:response deleteChannelReleaseUnauthorized
*/
type DeleteChannelReleaseUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteChannelReleaseUnauthorized creates DeleteChannelReleaseUnauthorized with default headers values
func NewDeleteChannelReleaseUnauthorized() *DeleteChannelReleaseUnauthorized {
	return &DeleteChannelReleaseUnauthorized{}
}

// WithPayload adds the payload to the delete channel release unauthorized response
func (o *DeleteChannelReleaseUnauthorized) WithPayload(payload *models.Error) *DeleteChannelReleaseUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete channel release unauthorized response
func (o *DeleteChannelReleaseUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteChannelReleaseUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteChannelReleaseNotFoundCode is the HTTP code returned for type DeleteChannelReleaseNotFound
const DeleteChannelReleaseNotFoundCode int = 404

/*DeleteChannelReleaseNotFound Resource not found

swagger:response deleteChannelReleaseNotFound
*/
type DeleteChannelReleaseNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteChannelReleaseNotFound creates DeleteChannelReleaseNotFound with default headers values
func NewDeleteChannelReleaseNotFound() *DeleteChannelReleaseNotFound {
	return &DeleteChannelReleaseNotFound{}
}

// WithPayload adds the payload to the delete channel release not found response
func (o *DeleteChannelReleaseNotFound) WithPayload(payload *models.Error) *DeleteChannelReleaseNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete channel release not found response
func (o *DeleteChannelReleaseNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteChannelReleaseNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
