// Code generated by go-swagger; DO NOT EDIT.

package channel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteChannelHandlerFunc turns a function with the right signature into a delete channel handler
type DeleteChannelHandlerFunc func(DeleteChannelParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteChannelHandlerFunc) Handle(params DeleteChannelParams) middleware.Responder {
	return fn(params)
}

// DeleteChannelHandler interface for that can handle valid delete channel params
type DeleteChannelHandler interface {
	Handle(DeleteChannelParams) middleware.Responder
}

// NewDeleteChannel creates a new http.Handler for the delete channel operation
func NewDeleteChannel(ctx *middleware.Context, handler DeleteChannelHandler) *DeleteChannel {
	return &DeleteChannel{Context: ctx, Handler: handler}
}

/*DeleteChannel swagger:route DELETE /api/v1/packages/{namespace}/{package}/channels/{channel} channel deleteChannel

Delete channel

*/
type DeleteChannel struct {
	Context *middleware.Context
	Handler DeleteChannelHandler
}

func (o *DeleteChannel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteChannelParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
