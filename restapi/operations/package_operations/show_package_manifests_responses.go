// Code generated by go-swagger; DO NOT EDIT.

package package_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bryanl/ksonnet-registry/models"
)

// ShowPackageManifestsOKCode is the HTTP code returned for type ShowPackageManifestsOK
const ShowPackageManifestsOKCode int = 200

/*ShowPackageManifestsOK successful operation

swagger:response showPackageManifestsOK
*/
type ShowPackageManifestsOK struct {

	/*
	  In: Body
	*/
	Payload models.PackageManifest `json:"body,omitempty"`
}

// NewShowPackageManifestsOK creates ShowPackageManifestsOK with default headers values
func NewShowPackageManifestsOK() *ShowPackageManifestsOK {
	return &ShowPackageManifestsOK{}
}

// WithPayload adds the payload to the show package manifests o k response
func (o *ShowPackageManifestsOK) WithPayload(payload models.PackageManifest) *ShowPackageManifestsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show package manifests o k response
func (o *ShowPackageManifestsOK) SetPayload(payload models.PackageManifest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowPackageManifestsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.PackageManifest, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// ShowPackageManifestsUnauthorizedCode is the HTTP code returned for type ShowPackageManifestsUnauthorized
const ShowPackageManifestsUnauthorizedCode int = 401

/*ShowPackageManifestsUnauthorized Not authorized to read the package

swagger:response showPackageManifestsUnauthorized
*/
type ShowPackageManifestsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewShowPackageManifestsUnauthorized creates ShowPackageManifestsUnauthorized with default headers values
func NewShowPackageManifestsUnauthorized() *ShowPackageManifestsUnauthorized {
	return &ShowPackageManifestsUnauthorized{}
}

// WithPayload adds the payload to the show package manifests unauthorized response
func (o *ShowPackageManifestsUnauthorized) WithPayload(payload *models.Error) *ShowPackageManifestsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show package manifests unauthorized response
func (o *ShowPackageManifestsUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowPackageManifestsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ShowPackageManifestsNotFoundCode is the HTTP code returned for type ShowPackageManifestsNotFound
const ShowPackageManifestsNotFoundCode int = 404

/*ShowPackageManifestsNotFound Package not found

swagger:response showPackageManifestsNotFound
*/
type ShowPackageManifestsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewShowPackageManifestsNotFound creates ShowPackageManifestsNotFound with default headers values
func NewShowPackageManifestsNotFound() *ShowPackageManifestsNotFound {
	return &ShowPackageManifestsNotFound{}
}

// WithPayload adds the payload to the show package manifests not found response
func (o *ShowPackageManifestsNotFound) WithPayload(payload *models.Error) *ShowPackageManifestsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show package manifests not found response
func (o *ShowPackageManifestsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowPackageManifestsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
