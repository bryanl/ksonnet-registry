// Code generated by go-swagger; DO NOT EDIT.

package package_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ShowPackageManifestsHandlerFunc turns a function with the right signature into a show package manifests handler
type ShowPackageManifestsHandlerFunc func(ShowPackageManifestsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ShowPackageManifestsHandlerFunc) Handle(params ShowPackageManifestsParams) middleware.Responder {
	return fn(params)
}

// ShowPackageManifestsHandler interface for that can handle valid show package manifests params
type ShowPackageManifestsHandler interface {
	Handle(ShowPackageManifestsParams) middleware.Responder
}

// NewShowPackageManifests creates a new http.Handler for the show package manifests operation
func NewShowPackageManifests(ctx *middleware.Context, handler ShowPackageManifestsHandler) *ShowPackageManifests {
	return &ShowPackageManifests{Context: ctx, Handler: handler}
}

/*ShowPackageManifests swagger:route GET /api/v1/packages/{namespace}/{package} package showPackageManifests

List all manifests for a package

*/
type ShowPackageManifests struct {
	Context *middleware.Context
	Handler ShowPackageManifestsHandler
}

func (o *ShowPackageManifests) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewShowPackageManifestsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
