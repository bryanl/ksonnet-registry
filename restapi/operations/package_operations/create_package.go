// Code generated by go-swagger; DO NOT EDIT.

package package_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreatePackageHandlerFunc turns a function with the right signature into a create package handler
type CreatePackageHandlerFunc func(CreatePackageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreatePackageHandlerFunc) Handle(params CreatePackageParams) middleware.Responder {
	return fn(params)
}

// CreatePackageHandler interface for that can handle valid create package params
type CreatePackageHandler interface {
	Handle(CreatePackageParams) middleware.Responder
}

// NewCreatePackage creates a new http.Handler for the create package operation
func NewCreatePackage(ctx *middleware.Context, handler CreatePackageHandler) *CreatePackage {
	return &CreatePackage{Context: ctx, Handler: handler}
}

/*CreatePackage swagger:route POST /api/v1/packages/{namespace}/{package} package createPackage

Push new package release to the registry

*/
type CreatePackage struct {
	Context *middleware.Context
	Handler CreatePackageHandler
}

func (o *CreatePackage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreatePackageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
