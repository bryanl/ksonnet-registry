// Code generated by go-swagger; DO NOT EDIT.

package package_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bryanl/ksonnet-registry/models"
)

// CreatePackageCreatedCode is the HTTP code returned for type CreatePackageCreated
const CreatePackageCreatedCode int = 201

/*CreatePackageCreated successful operation

swagger:response createPackageCreated
*/
type CreatePackageCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Package `json:"body,omitempty"`
}

// NewCreatePackageCreated creates CreatePackageCreated with default headers values
func NewCreatePackageCreated() *CreatePackageCreated {
	return &CreatePackageCreated{}
}

// WithPayload adds the payload to the create package created response
func (o *CreatePackageCreated) WithPayload(payload *models.Package) *CreatePackageCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create package created response
func (o *CreatePackageCreated) SetPayload(payload *models.Package) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePackageCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePackageUnauthorizedCode is the HTTP code returned for type CreatePackageUnauthorized
const CreatePackageUnauthorizedCode int = 401

/*CreatePackageUnauthorized Not authorized to create the package

swagger:response createPackageUnauthorized
*/
type CreatePackageUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreatePackageUnauthorized creates CreatePackageUnauthorized with default headers values
func NewCreatePackageUnauthorized() *CreatePackageUnauthorized {
	return &CreatePackageUnauthorized{}
}

// WithPayload adds the payload to the create package unauthorized response
func (o *CreatePackageUnauthorized) WithPayload(payload *models.Error) *CreatePackageUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create package unauthorized response
func (o *CreatePackageUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePackageUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePackageNotFoundCode is the HTTP code returned for type CreatePackageNotFound
const CreatePackageNotFoundCode int = 404

/*CreatePackageNotFound Package not found (if force=true)

swagger:response createPackageNotFound
*/
type CreatePackageNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreatePackageNotFound creates CreatePackageNotFound with default headers values
func NewCreatePackageNotFound() *CreatePackageNotFound {
	return &CreatePackageNotFound{}
}

// WithPayload adds the payload to the create package not found response
func (o *CreatePackageNotFound) WithPayload(payload *models.Error) *CreatePackageNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create package not found response
func (o *CreatePackageNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePackageNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePackageConflictCode is the HTTP code returned for type CreatePackageConflict
const CreatePackageConflictCode int = 409

/*CreatePackageConflict Package already exists

swagger:response createPackageConflict
*/
type CreatePackageConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreatePackageConflict creates CreatePackageConflict with default headers values
func NewCreatePackageConflict() *CreatePackageConflict {
	return &CreatePackageConflict{}
}

// WithPayload adds the payload to the create package conflict response
func (o *CreatePackageConflict) WithPayload(payload *models.Error) *CreatePackageConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create package conflict response
func (o *CreatePackageConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePackageConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreatePackageUnprocessableEntityCode is the HTTP code returned for type CreatePackageUnprocessableEntity
const CreatePackageUnprocessableEntityCode int = 422

/*CreatePackageUnprocessableEntity Bad version or name format

swagger:response createPackageUnprocessableEntity
*/
type CreatePackageUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreatePackageUnprocessableEntity creates CreatePackageUnprocessableEntity with default headers values
func NewCreatePackageUnprocessableEntity() *CreatePackageUnprocessableEntity {
	return &CreatePackageUnprocessableEntity{}
}

// WithPayload adds the payload to the create package unprocessable entity response
func (o *CreatePackageUnprocessableEntity) WithPayload(payload *models.Error) *CreatePackageUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create package unprocessable entity response
func (o *CreatePackageUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreatePackageUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
