// Code generated by go-swagger; DO NOT EDIT.

package package_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/bryanl/ksonnet-registry/models"
)

// ShowPackageReleasesOKCode is the HTTP code returned for type ShowPackageReleasesOK
const ShowPackageReleasesOKCode int = 200

/*ShowPackageReleasesOK successful operation

swagger:response showPackageReleasesOK
*/
type ShowPackageReleasesOK struct {

	/*
	  In: Body
	*/
	Payload models.PackageManifest `json:"body,omitempty"`
}

// NewShowPackageReleasesOK creates ShowPackageReleasesOK with default headers values
func NewShowPackageReleasesOK() *ShowPackageReleasesOK {
	return &ShowPackageReleasesOK{}
}

// WithPayload adds the payload to the show package releases o k response
func (o *ShowPackageReleasesOK) WithPayload(payload models.PackageManifest) *ShowPackageReleasesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show package releases o k response
func (o *ShowPackageReleasesOK) SetPayload(payload models.PackageManifest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowPackageReleasesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.PackageManifest, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// ShowPackageReleasesUnauthorizedCode is the HTTP code returned for type ShowPackageReleasesUnauthorized
const ShowPackageReleasesUnauthorizedCode int = 401

/*ShowPackageReleasesUnauthorized Not authorized to read the package

swagger:response showPackageReleasesUnauthorized
*/
type ShowPackageReleasesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewShowPackageReleasesUnauthorized creates ShowPackageReleasesUnauthorized with default headers values
func NewShowPackageReleasesUnauthorized() *ShowPackageReleasesUnauthorized {
	return &ShowPackageReleasesUnauthorized{}
}

// WithPayload adds the payload to the show package releases unauthorized response
func (o *ShowPackageReleasesUnauthorized) WithPayload(payload *models.Error) *ShowPackageReleasesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show package releases unauthorized response
func (o *ShowPackageReleasesUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowPackageReleasesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ShowPackageReleasesNotFoundCode is the HTTP code returned for type ShowPackageReleasesNotFound
const ShowPackageReleasesNotFoundCode int = 404

/*ShowPackageReleasesNotFound Package not found

swagger:response showPackageReleasesNotFound
*/
type ShowPackageReleasesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewShowPackageReleasesNotFound creates ShowPackageReleasesNotFound with default headers values
func NewShowPackageReleasesNotFound() *ShowPackageReleasesNotFound {
	return &ShowPackageReleasesNotFound{}
}

// WithPayload adds the payload to the show package releases not found response
func (o *ShowPackageReleasesNotFound) WithPayload(payload *models.Error) *ShowPackageReleasesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the show package releases not found response
func (o *ShowPackageReleasesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ShowPackageReleasesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
