// Code generated by go-swagger; DO NOT EDIT.

package package_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/bryanl/ksonnet-registry/models"
)

// DeletePackageReleaseReader is a Reader for the DeletePackageRelease structure.
type DeletePackageReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePackageReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeletePackageReleaseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeletePackageReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeletePackageReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeletePackageReleaseNoContent creates a DeletePackageReleaseNoContent with default headers values
func NewDeletePackageReleaseNoContent() *DeletePackageReleaseNoContent {
	return &DeletePackageReleaseNoContent{}
}

/*DeletePackageReleaseNoContent handles this case with default header values.

successful operation
*/
type DeletePackageReleaseNoContent struct {
}

func (o *DeletePackageReleaseNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/packages/{namespace}/{package}/{release}][%d] deletePackageReleaseNoContent ", 204)
}

func (o *DeletePackageReleaseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePackageReleaseUnauthorized creates a DeletePackageReleaseUnauthorized with default headers values
func NewDeletePackageReleaseUnauthorized() *DeletePackageReleaseUnauthorized {
	return &DeletePackageReleaseUnauthorized{}
}

/*DeletePackageReleaseUnauthorized handles this case with default header values.

Not authorized to read the package
*/
type DeletePackageReleaseUnauthorized struct {
	Payload *models.Error
}

func (o *DeletePackageReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/packages/{namespace}/{package}/{release}][%d] deletePackageReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *DeletePackageReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePackageReleaseNotFound creates a DeletePackageReleaseNotFound with default headers values
func NewDeletePackageReleaseNotFound() *DeletePackageReleaseNotFound {
	return &DeletePackageReleaseNotFound{}
}

/*DeletePackageReleaseNotFound handles this case with default header values.

Package not found
*/
type DeletePackageReleaseNotFound struct {
	Payload *models.Error
}

func (o *DeletePackageReleaseNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/packages/{namespace}/{package}/{release}][%d] deletePackageReleaseNotFound  %+v", 404, o.Payload)
}

func (o *DeletePackageReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
