// Code generated by go-swagger; DO NOT EDIT.

package package_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/bryanl/ksonnet-registry/models"
)

// ShowPackageReleaseReader is a Reader for the ShowPackageRelease structure.
type ShowPackageReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ShowPackageReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewShowPackageReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewShowPackageReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewShowPackageReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewShowPackageReleaseOK creates a ShowPackageReleaseOK with default headers values
func NewShowPackageReleaseOK() *ShowPackageReleaseOK {
	return &ShowPackageReleaseOK{}
}

/*ShowPackageReleaseOK handles this case with default header values.

successful operation
*/
type ShowPackageReleaseOK struct {
	Payload *models.Manifest
}

func (o *ShowPackageReleaseOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/packages/{namespace}/{package}/{release}][%d] showPackageReleaseOK  %+v", 200, o.Payload)
}

func (o *ShowPackageReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Manifest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShowPackageReleaseUnauthorized creates a ShowPackageReleaseUnauthorized with default headers values
func NewShowPackageReleaseUnauthorized() *ShowPackageReleaseUnauthorized {
	return &ShowPackageReleaseUnauthorized{}
}

/*ShowPackageReleaseUnauthorized handles this case with default header values.

Not authorized to read the package
*/
type ShowPackageReleaseUnauthorized struct {
	Payload *models.Error
}

func (o *ShowPackageReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/packages/{namespace}/{package}/{release}][%d] showPackageReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *ShowPackageReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewShowPackageReleaseNotFound creates a ShowPackageReleaseNotFound with default headers values
func NewShowPackageReleaseNotFound() *ShowPackageReleaseNotFound {
	return &ShowPackageReleaseNotFound{}
}

/*ShowPackageReleaseNotFound handles this case with default header values.

Release not found
*/
type ShowPackageReleaseNotFound struct {
	Payload *models.Error
}

func (o *ShowPackageReleaseNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/packages/{namespace}/{package}/{release}][%d] showPackageReleaseNotFound  %+v", 404, o.Payload)
}

func (o *ShowPackageReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
