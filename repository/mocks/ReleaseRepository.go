// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import repository "github.com/bryanl/ksonnet-registry/repository"
import time "time"

// ReleaseRepository is an autogenerated mock type for the ReleaseRepository type
type ReleaseRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ns, pkg, release, digest, size, createdAt
func (_m *ReleaseRepository) Create(ns string, pkg string, release string, digest string, size int, createdAt time.Time) (repository.Release, error) {
	ret := _m.Called(ns, pkg, release, digest, size, createdAt)

	var r0 repository.Release
	if rf, ok := ret.Get(0).(func(string, string, string, string, int, time.Time) repository.Release); ok {
		r0 = rf(ns, pkg, release, digest, size, createdAt)
	} else {
		r0 = ret.Get(0).(repository.Release)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, int, time.Time) error); ok {
		r1 = rf(ns, pkg, release, digest, size, createdAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ns, pkg, release
func (_m *ReleaseRepository) Delete(ns string, pkg string, release string) error {
	ret := _m.Called(ns, pkg, release)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(ns, pkg, release)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ns, pkg
func (_m *ReleaseRepository) List(ns string, pkg string) ([]repository.Release, error) {
	ret := _m.Called(ns, pkg)

	var r0 []repository.Release
	if rf, ok := ret.Get(0).(func(string, string) []repository.Release); ok {
		r0 = rf(ns, pkg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ns, pkg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: ns, pkg, release
func (_m *ReleaseRepository) Retrieve(ns string, pkg string, release string) (repository.Release, error) {
	ret := _m.Called(ns, pkg, release)

	var r0 repository.Release
	if rf, ok := ret.Get(0).(func(string, string, string) repository.Release); ok {
		r0 = rf(ns, pkg, release)
	} else {
		r0 = ret.Get(0).(repository.Release)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(ns, pkg, release)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveDigest provides a mock function with given fields: digest
func (_m *ReleaseRepository) RetrieveDigest(digest string) (repository.Release, error) {
	ret := _m.Called(digest)

	var r0 repository.Release
	if rf, ok := ret.Get(0).(func(string) repository.Release); ok {
		r0 = rf(digest)
	} else {
		r0 = ret.Get(0).(repository.Release)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(digest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
