// Code generated by mockery v1.0.0
package mocks

import io "io"
import mock "github.com/stretchr/testify/mock"
import storage "github.com/bryanl/ksonnet-registry/storage"

// S3Client is an autogenerated mock type for the S3Client type
type S3Client struct {
	mock.Mock
}

// GetObject provides a mock function with given fields: objectName
func (_m *S3Client) GetObject(objectName string) (storage.S3Object, error) {
	ret := _m.Called(objectName)

	var r0 storage.S3Object
	if rf, ok := ret.Get(0).(func(string) storage.S3Object); ok {
		r0 = rf(objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.S3Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: objectName, contentType, r, size
func (_m *S3Client) PutObject(objectName string, contentType string, r io.Reader, size int64) (int, error) {
	ret := _m.Called(objectName, contentType, r, size)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, io.Reader, int64) int); ok {
		r0 = rf(objectName, contentType, r, size)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader, int64) error); ok {
		r1 = rf(objectName, contentType, r, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveObject provides a mock function with given fields: objectName
func (_m *S3Client) RemoveObject(objectName string) error {
	ret := _m.Called(objectName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
